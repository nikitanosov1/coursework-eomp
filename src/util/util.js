const μ = [
  3.831705970207512468306276787189, 7.01558666981561884767870651558,
  10.173468135062721628969484299887, 13.323691936314222772352877655067,
  16.470630050877634431572005269118, 19.615858510468243025570700410753,
  22.760084380592772390627942513674, 25.903672087618382136042782803997,
  29.04682853491685534663702128455, 32.189679910974405174783896654844,
  35.332307550083868363799410872161, 38.474766234771614392684568883851,
  41.617094212814450315818248782307, 44.759318997652819405175250722095,
  47.901460887185443482394475722685, 51.043535183571506763655634131283,
  54.185553641061318330685026012361, 57.327525437901009297547716414556,
  60.469457845347491797838301863521, 63.611356698481230864672397729009,
  66.753226734098490169344586320221, 69.895071837495777344884118065238,
  73.036895225573843504207616206259, 76.178699584641464070955407805741,
  79.320487175476301899834652431309, 82.4622599143735612869932083413,
  85.604019436350228033916209824383, 88.745767144926304581531439907849,
  91.887504251694991808108170516789, 95.029231808044698937010252848268,
  98.170950730790778493428661022335, 101.312661823038737907154427375644,
  104.454365791282754116764408536255, 107.596063259509165277449938002974,
  110.737754780899223305823397822678, 113.879440847594992192171048372984,
  117.021121898892431545391445979476, 120.162798328149008852960832882673,
  123.304470488635715241798607166857, 126.446138698516591603038250468671,
  129.587803245103998506237985566258, 132.729464388509626360246329568326,
  135.87112236478898807945370208472, 139.0127773886597140062804101035,
  142.154429655859019021590938791633, 145.296079345195892074116272851825,
  148.437726620342232308757957071066, 151.579371631401443210052093490958,
  154.721014516285947593132732436061, 157.862655401930283005640376359224,
];

let k = 0;
let c = 0;
let α = 0;
let l = 0;
let T = 0;
let R = 0;
let β = 0;
let n = 0;

const setParameters = (params) => {
  k = params.k;
  c = params.c;
  α = params.α;
  l = params.l;
  T = params.T;
  R = params.R;
  β = params.β;
  n = params.n;
};

let result = [];

export const getGraphArray = () => {
  return result;
};

export const startCalculate = (params) => {
  setParameters(params);
  result = [];
  let r = 0;
  const countR = 100;
  const t = 60;
  while (r < R) {
    result.push({
      r: r.toFixed(3),
      u: U(r, t, n),
    });
    r += R / countR;
  }
};

const J_n = (x, N) => {
  let result = Math.pow(x / 2, N);
  for (let k = 0; k < n; k++) {
    result +=
      (Math.pow(-1, k) * Math.pow(x / 2, 2 * k)) /
      factorial(k) /
      factorial(N + k);
  }
  return result;
};

const λ = (i) => {
  return (-Math.pow(μ[i], 2) * k) / Math.pow(R, 2) - (2 * α) / l;
};

const B = (i) => {
  return (600 * β * J_n(μ[i], 1)) / (Math.pow(J_n(μ[i], 0), 2) * μ[i]);
};

const U = (r, t) => {
  let result = 0;
  for (let i = 1; i <= n; i++) {
    result +=
      ((B(i) * (Math.pow(Math.E, (λ(i) * t) / c) - 1)) / λ(i)) *
      J_n((μ[i] * r) / R, 0);
  }
  return result;
};

const factorial = (x) => {
  let result = 1;
  if (x === 0) {
    return 1;
  }
  if (x < 0) {
    console.log("Беда факториал");
    return undefined;
  }
  for (let i = 2; i <= x; i++) {
    result *= i;
  }
  return result;
};
