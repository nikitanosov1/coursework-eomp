const μ = [
  undefined,
  3.831705970207512468306276787188835442066192627,
  7.015586669815618847678706515580415725708007812,
  10.173468135062721628969484299886971712112426758,
  13.323691936314222772352877655066549777984619141,
  16.470630050877634431572005269117653369903564453,
  19.615858510468243025570700410753488540649414062,
  22.760084380592772390627942513674497604370117188,
  25.903672087618382136042782803997397422790527344,
  29.046828534916855346637021284550428390502929688,
  32.1896799109744051747838966548442840576171875,
  35.332307550083868363799410872161388397216796875,
  38.474766234771614392684568883851170539855957031,
  41.617094212814450315818248782306909561157226562,
  44.759318997652819405175250722095370292663574219,
  47.901460887185443482394475722685456275939941406,
  51.043535183571506763655634131282567977905273438,
  54.185553641061318330685026012361049652099609375,
  57.327525437901009297547716414555907249450683594,
  60.469457845347491797838301863521337509155273438,
  63.611356698481230864672397729009389877319335938,
  66.753226734098490169344586320221424102783203125,
  69.89507183749577734488411806523799896240234375,
  73.036895225573843504207616206258535385131835938,
  76.178699584641464070955407805740833282470703125,
  79.320487175476301899834652431309223175048828125,
  82.462259914373561286993208341300487518310546875,
  85.604019436350228033916209824383258819580078125,
  88.745767144926304581531439907848834991455078125,
  91.887504251694991808108170516788959503173828125,
  95.02923180804469893701025284826755523681640625,
  98.170950730790778493428661022335290908813476562,
  101.312661823038737907154427375644445419311523438,
  104.454365791282754116764408536255359649658203125,
  107.596063259509165277449938002973794937133789062,
  110.737754780899223305823397822678089141845703125,
  113.8794408475949921921710483729839324951171875,
  117.02112189889243154539144597947597503662109375,
  120.162798328149008852960832882672548294067382812,
  123.304470488635715241798607166856527328491210938,
  126.446138698516591603038250468671321868896484375,
  129.58780324510399850623798556625843048095703125,
  132.729464388509626360246329568326473236083984375,
  135.871122364788988079453702084720134735107421875,
  139.012777388659714006280410103499889373779296875,
  142.15442965585901902159093879163265228271484375,
  145.29607934519589207411627285182476043701171875,
  148.4377266203422323087579570710659027099609375,
  151.57937163140144321005209349095821380615234375,
  154.72101451628594759313273243606090545654296875,
  157.8626554019302830056403763592243194580078125,
  161.004294405362003317350172437727451324462890625,
  164.1459316346496279948041774332523345947265625,
  167.28756718974409523070789873600006103515625,
  170.429201163226622384172515012323856353759765625,
  173.570833640975934031303040683269500732421875,
  176.712464702763753621184150688350200653076171875,
  179.854094422788392648726585321128368377685546875,
  182.99572287015297433754312805831432342529296875,
  186.137350109295510947049479000270366668701171875,
  189.27897620037600745490635745227336883544921875,
  192.4206011996257075225003063678741455078125,
  195.562225159662574469621176831424236297607421875,
  198.703848129777043141075409948825836181640625,
  201.845470156190884836178156547248363494873046875,
  204.987091282292340110871009528636932373046875,
  208.12871154885004898460465483367443084716796875,
  211.27033099420776807164656929671764373779296875,
  214.411949654461977843311615288257598876953125,
  217.55356756362419901051907800137996673583984375,
  220.695184753769353847019374370574951171875,
  223.8368012551717356473091058433055877685546875,
  226.978417096429467392226797528564929962158203125,
  230.120032304579098081376287154853343963623046875,
  233.26164690520062094947206787765026092529296875,
  236.403260922514306230368674732744693756103515625,
  239.544874379469860059543862007558345794677734375,
  242.68648729782870532289962284266948699951171875,
  245.828099698239810777522507123649120330810546875,
  248.969711600309921095686149783432483673095703125,
  252.111323022668585736028035171329975128173828125,
  255.2529339830281287504476495087146759033203125,
  258.3945444982394974431372247636318206787109375,
  261.53615458434404672516393475234508514404296875,
  264.67776425662151495998841710388660430908203125,
  267.81937352963456078214221633970737457275390625,
  270.96098241727071354034706018865108489990234375,
  274.102590932780685761827044188976287841796875,
  277.24419908881458241012296639382839202880859375,
  280.3858068974556090324767865240573883056640625,
  283.52741437025139248362393118441104888916015625,
  286.6690215182434258167631924152374267578125,
  289.810628351994409968028776347637176513671875,
  292.9522348816138901383965276181697845458984375,
  296.09384111678247109011863358318805694580078125,
  299.23544706677415661033592186868190765380859375,
  302.3770527404775521063129417598247528076171875,
  305.51865814641558927178266458213329315185546875,
  308.6602632927643981020082719624042510986328125,
  311.80186818737047360627911984920501708984375,
  314.94347283776716039938037283718585968017578125,
];

let k = 0;
let c = 0;
let α = 0;
let l = 0;
let T = 0;
let R = 0;
let β = 0;
let n = 0;

const setParameters = (params) => {
  k = params.k;
  c = params.c;
  α = params.α;
  l = params.l;
  T = params.T;
  R = params.R;
  β = params.β;
  n = params.n;
};

const countX = 21;
const countY = 6;

let firstGraph = [];
let secondGraph = [];

export const getFirstGraphArray = () => {
  return firstGraph;
};

export const getSecondGraphArray = () => {
  return secondGraph;
};

export const startCalculate = (params) => {
  setParameters(params);
  firstGraph = [];
  secondGraph = [];

  let r = 0;
  while (r <= R + 0.001) {
    let t = 0;
    let numberOfT = 0;
    const objectForPush = {
      r: r.toFixed(2),
    };
    while (t <= T) {
      objectForPush[`t${numberOfT} = ${t.toFixed(2)}`] = U(r, t);
      t += T / countY;
      numberOfT++;
    }
    firstGraph.push(objectForPush);
    r += R / (countX - 1);
  }

  let t = 0;
  while (t <= T + 0.001) {
    let r = 0;
    let numberOfR = 0;
    const objectForPush = {
      t: t.toFixed(2),
    };
    while (r <= R) {
      objectForPush[`r${numberOfR} = ${r.toFixed(2)}`] = U(r, t);
      r += R / countY;
      numberOfR++;
    }
    secondGraph.push(objectForPush);
    t += T / (countX - 1);
  }
};

const J_n = (x, N) => {
  let result = 0;
  for (let k = 0; k < n; k++) {
    let temp = Math.pow(-1, k) * Math.pow(x / 2, 2 * k);

    for (let j = 2; j <= k; j++) {
      temp /= j;
      temp /= j;
    }
    for (let j = k + 1; j <= k + N; j++) {
      temp /= j;
    }

    result += temp;
  }
  result *= Math.pow(x / 2, N);
  return result;
};

const λ = (i) => {
  return (-Math.pow(μ[i], 2) * k) / Math.pow(R, 2) - (2 * α) / l;
};

const B = (i) => {
  // return (600 * β * J_n(μ[i], 1)) / (Math.pow(J_n(μ[i], 0), 2) * μ[i]);
  return (
    (0.4 * β * 300 * J_n((μ[i] * 0.2) / R, 1)) /
    (R * Math.pow(J_n(μ[i], 0), 2) * μ[i])
  );
};

const U = (r, t) => {
  let result = 0;
  for (let i = 1; i <= n; i++) {
    result +=
      ((B(i) * (Math.pow(Math.E, (λ(i) * t) / c) - 1)) / λ(i)) *
      J_n((μ[i] * r) / R, 0);
  }
  return result;
};

const factorial = (x) => {
  let result = 1;
  if (x === 0) {
    return 1;
  }
  if (x < 0) {
    console.log("Беда факториал");
    return undefined;
  }
  for (let i = 2; i <= x; i++) {
    result *= i;
  }
  return result;
};
